/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only read and write their own profile data and transactions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The {userId} must match the authenticated user's UID.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data for a specific user. Only the owner can create, read, update, and delete these transactions.
 *
 * Key Security Decisions:
 * - Users can only list transactions that belong to them.
 * - Data shape is NOT strictly validated in this prototyping phase beyond authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's UID matches the {userId} path parameter.
     * @allow (get) If the authenticated user's UID matches the {userId} path parameter.
     * @allow (update) If the authenticated user's UID matches the {userId} path parameter.
     * @allow (delete) If the authenticated user's UID matches the {userId} path parameter.
     * @deny (create) If the authenticated user's UID does not match the {userId} path parameter.
     * @deny (get) If the authenticated user's UID does not match the {userId} path parameter.
     * @deny (update) If the authenticated user's UID does not match the {userId} path parameter.
     * @deny (delete) If the authenticated user's UID does not match the {userId} path parameter.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure user transactions. Only the authenticated user can manage their own transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) If the authenticated user's UID matches the {userId} path parameter.
     * @allow (get) If the authenticated user's UID matches the {userId} path parameter.
     * @allow (update) If the authenticated user's UID matches the {userId} path parameter.
     * @allow (delete) If the authenticated user's UID matches the {userId} path parameter.
     * @deny (create) If the authenticated user's UID does not match the {userId} path parameter.
     * @deny (get) If the authenticated user's UID does not match the {userId} path parameter.
     * @deny (update) If the authenticated user's UID does not match the {userId} path parameter.
     * @deny (delete) If the authenticated user's UID does not match the {userId} path parameter.
     * @principle Enforces document ownership for all operations on user transactions.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}